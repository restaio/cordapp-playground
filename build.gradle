buildscript {
    ext {
        kotlin_version = '1.2.61'
        corda_release_version = '1.0.0'
        corda_gradle_plugins_version = '1.0.0'
        spring_boot_version = '2.0.4.RELEASE'
        quasar_version = '0.7.6'
        junit_version = '4.12'
    }
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
    }
}

allprojects {
    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven { url 'https://dl.bintray.com/kotlin/exposed' }
        maven { url 'https://jitpack.io' }
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }
    }
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            languageVersion = '1.1'
            apiVersion = '1.1'
            jvmTarget = '1.8'
            javaParameters = true   // Useful for reflection.
        }
    }
}

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven { url 'https://dl.bintray.com/kotlin/exposed' }
    maven { url 'https://jitpack.io' }
    maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }
}

apply plugin: 'kotlin'
apply plugin: 'net.corda.plugins.cordformation'

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testCompile "junit:junit:$junit_version"

    // Corda integration dependencies
    cordaCompile "net.corda:corda-core:$corda_release_version"
    cordaCompile "net.corda:corda-finance:$corda_release_version"
    cordaCompile "net.corda:corda-jackson:$corda_release_version"
    cordaCompile "net.corda:corda-rpc:$corda_release_version"
    cordaRuntime "net.corda:corda:$corda_release_version"
    testCompile "net.corda:corda-node-driver:$corda_release_version"

    cordapp project(':estates')
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        languageVersion = '1.1'
        apiVersion = '1.1'
        jvmTarget = '1.8'
        javaParameters = true   // Useful for reflection.
    }
}

task deployNodes(group: 'corda', type: net.corda.plugins.Cordform, dependsOn: ['jar']) {
    directory './build/nodes'
    networkMap 'O=Controller,L=Jakarta,C=ID'
    node {
        name 'O=Controller,L=Jakarta,C=ID'
        advertisedServices = ['corda.notary.validating']
        p2pPort 10002
        rpcPort 10003
        cordapps = ['restaio:estates:0.0.1']
    }
    node {
        name 'O=Investor,L=Jakarta,C=ID'
        advertisedServices = []
        p2pPort 10005
        rpcPort 10006
        cordapps = ['restaio:estates:0.0.1']
        rpcUsers = [[user: 'user1', password: 'test', permissions: [
                'StartFlow.restaio.estates.flow.EstateFlow',
                'StartFlow.restaio.estates.flow.InvestFlow'
        ]]]
    }
    node {
        name 'O=Developer,L=Ulsan,C=KR'
        advertisedServices = []
        p2pPort 10008
        rpcPort 10009
        cordapps = ['restaio:estates:0.0.1']
        rpcUsers = [[user: 'user1', password: 'test', permissions: [
                'StartFlow.restaio.estates.flow.EstateFlow',
                'StartFlow.restaio.estates.flow.InvestFlow'
        ]]]
    }
    node {
        name 'O=RESTA,L=Ulsan,C=KR'
        advertisedServices = []
        p2pPort 10011
        rpcPort 10012
        cordapps = ['restaio:estates:0.0.1']
        rpcUsers = [[user: 'user1', password: 'test', permissions: [
                'StartFlow.restaio.estates.flow.EstateFlow'
        ]]]
    }
}

task startNodes(group: 'corda', type: Exec, dependsOn: ['deployNodes']) {
    if (com.sun.javafx.PlatformUtil.isWindows()) {
        commandLine 'build/nodes/runnodes.bat'
    } else {
        commandLine './build/nodes/runnodes'
    }
}
